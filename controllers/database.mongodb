// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('todo-list');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.lists.drop();

// Insert a few documents into the lists collection.
db.lists.insertMany([
  { '_id': 1, 'title': 'Market list', 'description': 'List of items I need in the market', 'createdBy': 2, 'date': new Date('2022-03-01T08:00:00Z') },
  { '_id': 2, 'title': 'chores', 'description': 20, 'createdBy': 'chores to do', 'date': new Date('2022-03-01T09:00:00Z') },
  { '_id': 3, 'title': 'shopping', 'description': 5, 'createdBy': 'items to buy', 'date': new Date('2022-03-15T09:00:00Z') },
  { '_id': 4, 'title': 'reading', 'description': 5, 'createdBy':  'books to read', 'date': new Date('2012-04-04T11:21:39.736Z') },
  { '_id': 5, 'title': 'food', 'description': 10, 'createdBy': 'Meals to prepare', 'date': new Date('2012-04-04T21:23:13.331Z') },
  { '_id': 6, 'title': 'drinks', 'description': 7.5, 'createdBy': 'Drinks to make', 'date': new Date('2012-06-04T05:08:13Z') },
  { '_id': 7, 'title': 'parties', 'description': 7.5, 'createdBy': 'Parties to attend', 'date': new Date('2012-09-10T08:43:00Z') },
  { '_id': 8, 'title': 'Adventure', 'description': 10, 'createdBy': 'Sites to see', 'date': new Date('2012-02-06T20:20:13Z') },
]);

// Run a find command to view items sold on April 4th, 2014.
db.lists.find({ date: { $gte: new Date('2012-04-04'), $lt: new Date('2012-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
